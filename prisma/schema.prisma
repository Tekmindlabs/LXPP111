generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Models
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  phoneNumber       String?
  emailVerified     DateTime?
  image             String?
  password          String?
  status            Status    @default(ACTIVE)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deleted           DateTime?
  dataRetentionDate DateTime?
  dateOfBirth       DateTime?

  // userRoles relation
  userType  UserType?
  userRoles UserRole[]

  // Profile Relations
  studentProfile       StudentProfile?
  teacherProfile       TeacherProfile?
  coordinatorProfile   CoordinatorProfile?
  parentProfile        ParentProfile?
  notificationSettings NotificationSettings?

  // Communication Relations
  sentNotifications     Notification[]            @relation("SentNotifications")
  receivedNotifications NotificationRecipient[]
  sentMessages          Message[]                 @relation("SentMessages")
  receivedMessages      MessageRecipient[]
  conversations         ConversationParticipant[]
  messageReactions      MessageReaction[]
  teacherAssignments    TeacherAssignment[]
  progressTracking      ProgressTracking[]

  // Activity Tracking
  activityLogs ActivityLog[]

  @@map("users")
}

// Activity Tracking
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CalendarType {
  PRIMARY
  SECONDARY
  EXAM
  ACTIVITY
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Visibility {
  ALL
  STAFF
  STUDENTS
  PARENTS
}

// Academic Structure
model Calendar {
  id          String       @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  type        CalendarType @default(PRIMARY)
  status      Status       @default(ACTIVE)
  isDefault   Boolean      @default(false)
  events      Event[]
  programs    Program[]
  terms       Term[]
  classGroups ClassGroup[]
  visibility  Visibility   @default(ALL)
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name, type])
  @@map("calendars")
}

model Event {
  id          String     @id @default(cuid())
  title       String
  description String?
  eventType   EventType
  startDate   DateTime
  endDate     DateTime
  calendar    Calendar   @relation(fields: [calendarId], references: [id])
  calendarId  String
  status      Status     @default(ACTIVE)
  priority    Priority   @default(MEDIUM)
  visibility  Visibility @default(ALL)
  recurrence  Json?
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([title, calendarId, eventType])
  @@map("events")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  level       String
  calendarId  String
  programId   String?
  classGroupId String?
  classId     String?
  status      Status   @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("calendar_events")
}

model Term {
  id             String          @id @default(cuid())
  name           String
  calendar       Calendar        @relation(fields: [calendarId], references: [id])
  calendarId     String
  startDate      DateTime
  endDate        DateTime
  status         Status          @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  timetables     Timetable[]
  gradingPeriods GradingPeriod[]
  weeks          Week[]

  @@unique([name, calendarId])
}

model GradingPeriod {
  id        String   @id @default(cuid())
  name      String
  term      Term     @relation(fields: [termId], references: [id])
  termId    String
  startDate DateTime
  endDate   DateTime
  weight    Int      @default(50)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, termId])
}

model Week {
  id         String   @id @default(cuid())
  weekNumber Int
  term       Term     @relation(fields: [termId], references: [id])
  termId     String
  startDate  DateTime
  endDate    DateTime
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([weekNumber, termId])
}

model Program {
  id            String              @id @default(cuid())
  name          String?             @unique
  description   String?
  status        Status              @default(ACTIVE)
  coordinator   CoordinatorProfile? @relation(fields: [coordinatorId], references: [id])
  coordinatorId String?
  calendar      Calendar            @relation(fields: [calendarId], references: [id])
  calendarId    String
  classGroups   ClassGroup[]
  courses       Course[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("programs")
}

model Course {
  id             String       @id @default(cuid())
  name           String
  academicYear   String
  program        Program      @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId      String
  subjects       Subject[]
  classGroups    ClassGroup[] // New relation
  isTemplate     Boolean      @default(false)
  parentCourseId String?      // For tracking inheritance
  parentCourse   Course?      @relation("CourseInheritance", fields: [parentCourseId], references: [id], onDelete: SetNull)
  childCourses   Course[]     @relation("CourseInheritance")
  settings       Json?        // Course settings
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("courses")
}

model ClassGroup {
  id          String          @id @default(cuid())
  name        String
  description String?
  program     Program         @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId   String
  course      Course?         @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId    String?
  calendar    Calendar        @relation(fields: [calendarId], references: [id], onDelete: Restrict)
  calendarId  String
  classes     Class[]
  subjects    Subject[]
  timetables  Timetable[]
  activities  ClassActivity[]
  status      Status          @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([name, programId])
  @@map("class_groups")
}

model Subject {
  id              String              @id @default(cuid())
  name            String
  code            String              @unique
  description     String?
  courseStructure Json?               // Stores CourseStructure as JSON
  status          Status              @default(ACTIVE)
  classGroups     ClassGroup[]
  teachers        TeacherSubject[]
  periods         Period[]
  course          Course?             @relation(fields: [courseId], references: [id])
  courseId        String?
  teacherAssignments TeacherAssignment[]
  activities      ClassActivity[]
  progress        ProgressTracking[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("subjects")
}

model TeacherAssignment {
  id             String   @id @default(cuid())
  teacher        User     @relation(fields: [teacherId], references: [id])
  teacherId      String
  subject        Subject  @relation(fields: [subjectId], references: [id])
  subjectId      String
  classId        String   // References the class this assignment belongs to
  isClassTeacher Boolean  @default(false)
  assignedAt     DateTime @default(now())

  @@unique([teacherId, subjectId, classId])
}

model ProgressTracking {
  id        String   @id @default(cuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  progress  Json     // Stores progress data as JSON
  updatedAt DateTime @updatedAt

  @@unique([studentId, subjectId])
}

model Class {
  id           String           @id @default(cuid())
  name         String
  classGroup   ClassGroup       @relation(fields: [classGroupId], references: [id])
  classGroupId String
  capacity     Int
  students     StudentProfile[]
  teachers     TeacherClass[]
  activities   ClassActivity[]
  timetables   Timetable[]
  status       Status           @default(ACTIVE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([name, classGroupId])
  @@map("classes")
}

// Profile Models
model StudentProfile {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @unique
  dateOfBirth DateTime?
  class       Class?            @relation(fields: [classId], references: [id])
  classId     String?
  activities  StudentActivity[]
  attendance  Attendance[]
  parent      ParentProfile?    @relation(fields: [parentId], references: [id])
  parentId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("student_profiles")
}

model TeacherProfile {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String           @unique
  teacherType    TeacherType     @default(SUBJECT)
  specialization String?
  subjects       TeacherSubject[]
  classes        TeacherClass[]
  periods        Period[]
  availability   String?
  permissions    String[]         @default([])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
  @@map("teacher_profiles")
}

model TeacherSubject {
  id        String         @id @default(cuid())
  teacher   TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId String
  subject   Subject        @relation(fields: [subjectId], references: [id])
  subjectId String
  status    Status         @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([teacherId, subjectId])
}

model TeacherClass {
  id             String         @id @default(cuid())
  teacher        TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId      String
  class          Class          @relation(fields: [classId], references: [id])
  classId        String
  isClassTeacher Boolean        @default(false)
  status         Status         @default(ACTIVE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([teacherId, classId])
}

model CoordinatorProfile {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  programs  Program[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("coordinator_profiles")
}

model ParentProfile {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @unique
  children  StudentProfile[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("parent_profiles")
}

// Attendance Models

model Attendance {
  id        String           @id @default(cuid())
  student   StudentProfile   @relation(fields: [studentId], references: [id])
  studentId String
  date      DateTime
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

    @@unique([studentId, date])
    
}

// Activity & Assessment Models
model ClassActivity {
  id          String    @id @default(cuid())
  type        String    // 'ASSIGNMENT' | 'QUIZ' | 'PROJECT' | 'DISCUSSION'
  title       String
  description String
  dueDate     DateTime?
  points      Int?
  status      String    // 'DRAFT' | 'PUBLISHED' | 'ARCHIVED'
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  classGroup  ClassGroup? @relation(fields: [classGroupId], references: [id])
  classGroupId String?
  class       Class?    @relation(fields: [classId], references: [id])
  classId     String?
  resources   Resource[]
  submissions StudentActivity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([title, classId])
}

model StudentActivity {
  id             String         @id @default(cuid())
  student        StudentProfile @relation(fields: [studentId], references: [id])
  studentId      String
  activity       ClassActivity  @relation(fields: [activityId], references: [id])
  activityId     String
  status         ActivityStatus @default(PENDING)
  grade          Float?
  feedback       String?
  submissionDate DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([studentId, activityId])
}

model Resource {
  id         String        @id @default(cuid())
  title      String
  type       ResourceType
  url        String
  activity   ClassActivity @relation(fields: [activityId], references: [id])
  activityId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([title, activityId])
}

// Timetable & Classroom Models
model Timetable {
  id           String     @id @default(cuid())
  term         Term       @relation(fields: [termId], references: [id])
  termId       String
  classGroup   ClassGroup @relation(fields: [classGroupId], references: [id])
  classGroupId String
  class        Class      @relation(fields: [classId], references: [id])
  classId      String
  periods      Period[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([termId, classGroupId, classId])
}

model Period {
  id               String          @id @default(cuid())
  startTime        DateTime
  endTime          DateTime
  durationInMinutes Int           @default(45)
  dayOfWeek        Int            // 1-7 representing Monday-Sunday
  subject          Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId        String
  classroom        Classroom      @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId      String
  timetable        Timetable      @relation(fields: [timetableId], references: [id], onDelete: Cascade)
  timetableId      String
  teacher          TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([timetableId, dayOfWeek, startTime])
  @@unique([teacherId, dayOfWeek, startTime])
  @@unique([classroomId, dayOfWeek, startTime])
  @@index([subjectId])
  @@index([classroomId])
  @@index([timetableId])
  @@index([teacherId])
}

model Classroom {
  id        String   @id @default(cuid())
  name      String   @unique
  capacity  Int
  resources String? // JSON string of available resources
  periods   Period[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Communication Models
model Notification {
  id         String                  @id @default(cuid())
  title      String
  content    String
  type       NotificationType
  sender     User                    @relation("SentNotifications", fields: [senderId], references: [id])
  senderId   String
  recipients NotificationRecipient[]
  entityType String? // e.g., "TIMETABLE", "ASSIGNMENT", "GRADE"
  entityId   String? // Reference to the entity that triggered the notification
  metadata   Json? // Additional context about the notification
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
}

model NotificationRecipient {
  id             String       @id @default(cuid())
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  recipient      User         @relation(fields: [recipientId], references: [id])
  recipientId    String
  read           Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([notificationId, recipientId])
}

model Message {
  id             String              @id @default(cuid())
  content        String
  sender         User                @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  recipients     MessageRecipient[]
  conversation   Conversation        @relation(fields: [conversationId], references: [id])
  conversationId String
  attachments    MessageAttachment[]
  reactions      MessageReaction[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model MessageRecipient {
  id          String    @id @default(cuid())
  message     Message   @relation(fields: [messageId], references: [id])
  messageId   String
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId String
  read        Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([messageId, recipientId])
}

model MessageAttachment {
  id        String         @id @default(cuid())
  message   Message        @relation(fields: [messageId], references: [id])
  messageId String
  type      AttachmentType
  url       String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model MessageReaction {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String // e.g., "THUMBS_UP", "HEART", "SMILE"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId, type])
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  type         ConversationType          @default(DIRECT)
  messages     Message[]
  participants ConversationParticipant[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model NotificationSettings {
  id                 String    @id @default(cuid())
  user               User      @relation(fields: [userId], references: [id])
  userId             String    @unique
  emailNotifications Boolean   @default(true)
  pushNotifications  Boolean   @default(true)
  timetableChanges   Boolean   @default(true)
  assignmentUpdates  Boolean   @default(true)
  gradeUpdates       Boolean   @default(true)
  systemUpdates      Boolean   @default(true)
  doNotDisturb       Boolean   @default(false)
  doNotDisturbStart  DateTime?
  doNotDisturbEnd    DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversation   Conversation    @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?

  @@unique([conversationId, userId])
}

// UserRole model
model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Role {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  userRoles   UserRole[]
  permissions RolePermission[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("roles")
}


model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

enum UserType {
  ADMIN
  COORDINATOR
  TEACHER
  STUDENT
  PARENT
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum EventType {
  ACADEMIC
  HOLIDAY
  EXAM
  ACTIVITY
  OTHER
}

enum ActivityType {
  QUIZ
  ASSIGNMENT
  READING
  PROJECT
  EXAM
}

enum ActivityStatus {
  PENDING
  SUBMITTED
  GRADED
  LATE
  MISSED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ResourceType {
  DOCUMENT
  VIDEO
  AUDIO
  LINK
  IMAGE
}

enum NotificationType {
  ANNOUNCEMENT
  ASSIGNMENT
  GRADE
  REMINDER
  SYSTEM
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
}

enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
}

enum TeacherType {
  CLASS
  SUBJECT
}

// Knowledge Base Models
model KnowledgeBase {
  id          String      @id @default(cuid())
  name        String
  description String?
  folders     Folder[]
  documents   Document[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("knowledge_bases")
}

model Folder {
  id             String        @id @default(cuid())
  name           String
  description    String?
  parentFolder   Folder?       @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId       String?
  subFolders     Folder[]      @relation("FolderHierarchy")
  documents      Document[]
  metadata       Json?
  knowledgeBase  KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  knowledgeBaseId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("folders")
}

model Document {
  id             String        @id @default(cuid())
  title          String
  type           String
  content        String        @db.Text
  embeddings     Float[]
  metadata       Json?
  folder         Folder        @relation(fields: [folderId], references: [id])
  folderId       String
  knowledgeBase  KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  knowledgeBaseId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("documents")
}

